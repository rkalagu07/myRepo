 Type type = new TypeToken<List<Service>>() {}.getType();
        return new Gson().fromJson(pref.getString(SAVE_SERVICE_LIST,""),type);
		
		
		
		package com.service.ray.di.modules;



import com.service.ray.BuildConfig;
import com.service.ray.data.network.service.ConnexionAPI;
import com.service.ray.data.network.service.PostalCodeApi;

import java.util.concurrent.TimeUnit;

import javax.inject.Singleton;

import dagger.Module;
import dagger.Provides;
import dagger.hilt.InstallIn;
import dagger.hilt.components.SingletonComponent;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@Module
@InstallIn(SingletonComponent.class)
public class HttpClientNetworkManager {

    String baseURL = "https://api.postalpincode.in/";//repositories?q=newyork pincode/110001

    @Singleton
    @Provides
    public Retrofit getRetroInstance() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        builder.addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY));
        builder.connectTimeout(30, TimeUnit.SECONDS);
        builder.readTimeout(30, TimeUnit.SECONDS);
        builder.writeTimeout(30, TimeUnit.SECONDS);
        OkHttpClient httpClient = builder
                .build();

        return new Retrofit.Builder()
                .baseUrl(BuildConfig.BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .client(httpClient)
                .build();
    }
    @Singleton
    @Provides
    public ConnexionAPI getRetroServiceInterface(Retrofit retrofit) {
        return retrofit.create(ConnexionAPI.class);
    }

    @Singleton
    @Provides
    PostalCodeApi getPostalCodeApi() {
        OkHttpClient httpClient = new OkHttpClient.Builder()
                .addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(30, TimeUnit.SECONDS)
                .build();
        return new Retrofit.Builder()
                .baseUrl(baseURL)
                .addConverterFactory(GsonConverterFactory.create())
                .client(httpClient)
                .build().create(PostalCodeApi.class);
    }

}
